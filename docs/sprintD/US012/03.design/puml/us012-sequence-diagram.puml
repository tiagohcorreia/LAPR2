@startuml
'https://plantuml.com/sequence-diagram

skinparam monochrome true
skinparam shadowing false
autonumber

actor "System Administrator" as sa
participant ":LegacyImportUI" as ui
participant ":LegacyImportController" as ctrl
participant ":FileOps" as fo
participant ":CsvHandler" as ch

participant ":Repositories" as repos
participant "repositories\n:Repositories" as repositories
'participant "announcementRepository\n:AnnouncementRepository" as AnnR
participant "employeeRepository\n:EmployeeRepository" as EmpR
'participant "clientRepository\n:ClientRepository" as CliR
'participant "branchRepository\n:BranchRepository" as BraR
participant "newEmployee\n:Employee" as Emp
'participant ":Announcement" as Ann
'participant ":Property" as Pro

activate sa
sa -> ui: starts importing data
activate ui
ui -> ctrl**: create
activate ctrl
ctrl -> repos: getInstance()
activate repos
return repositories

'ctrl -> repositories: getBranchRepository()
'activate repositories
'return branchRepository

'ctrl -> repositories: getAnnouncementRepository()
'activate repositories
'return announcementRepository

ctrl -> repositories: getEmployeeRepository()
activate repositories
return employeeRepository


''ctrl -> repositories: getClientRepository()
'activate repositories
'return clientRepository
deactivate ctrl

return requests file path

sa -> ui: types file path
activate ui

ui -> ctrl: readFile(filePath)
activate ctrl
'ctrl -> fh**: create
ctrl -> fo: readFile(filePath)
activate fo
alt file not found
fo -> ctrl: FileNotFoundExeption
ctrl -> ui: false
ui -> sa: informs file not found
else file extension is not csv
fo -> ctrl: InvalidFileTypeException
ctrl -> ui: false
ui -> sa: informs file is not CSV
else file found
    return file
ctrl -> fo: readCSV(file)
activate fo
return csv[]

ctrl -> ctrl: csv[].length()
'activate ctrl
alt csv[].length() < 2
ctrl -> ui: null
ui -> sa: inform file is empty
else csv[].length >= 2

ctrl -> EmpR: getEmployeeByName("Legacy Agent")
activate EmpR
alt
    EmpR --> ctrl: Employee legacyAgent
else
    return null
    ctrl -> EmpR: registerEmployee(\n"Legacy Agent", ...)
    activate EmpR
    EmpR -> Emp**: create
    activate Emp
    Emp -> Emp: validateEmployee()
    return true
    return true
end


ctrl -> ch: parseCsv(csv)
activate ch
ref over ch: SD_CsvHandler_parseCsv
autonumber 56
return true
return inform operation success
return inform operation success
end
end



'alt
'    ui --> sa: informs operation success
'else
'    ui --> sa: inform no CSV file found
'else
'    return inform file is empty
'
'end

deactivate sa

@enduml