@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "Agent" as AG
participant ":PublishAnnouncementUI" as UI
participant ":PublishAnnouncementController" as CTRL
participant ":ApplicationSession" as _APP
participant "appSession\n:ApplicationSession" as APP
participant "currentSession\n:UserSession" as SESSAO
participant "repositories\n:Repositories" as REP
participant "city repository\n:CityRepository" as CITY
participant "employee Repository\n:EmployeeRepository" as EMP
participant "Notification Service\n:NotificationService" as NS
participant ":AnnouncementRepository" as AnnouncementREP
participant "new Announcement\n:Announcement" as Announcement
participant "new Property\n:Property" as Property
participant "new House\n:House" as House
participant "new Apartment\n:Apartment" as Apartment
participant "new Land\n:Land" as Land




activate AG

        AG -> UI : asks to publish an announcement
        activate UI

        UI --> AG : presents the type of property list

        AG -> UI : select the property type

        UI --> AG : requests all common data to all property (area, distance from city center, photographs)


        AG -> UI : insert the requested data common of all properties(area,distance \nfrom the city center photographs)

      UI -> CTRL** : create

      CTRL -> CTRL : getCityList()
      activate CTRL

      CTRL -> REP : getInstance
      activate REP

       REP --> CTRL: repositories
        deactivate REP

         CTRL -> REP : getCityRepository()
            activate REP
             REP-> CTRL : CityRepository
              deactivate REP
               CTRL -> CITY : getCityList()
               activate CITY

                CITY --> CTRL : CityList
                deactivate CITY

                  CTRL --> CTRL : CityList

                  CTRL --> UI : CityList

        UI --> AG : presents the list of cities

            AG -> UI : select the city

            UI --> AG : request the other location data (street, zipcode)

            AG -> UI : insert the data (street, zipcode)


        alt House

        AG -> UI : insert the house (door number, number of bedrooms, number of bathrooms,\n number of parking spaces, available equipments, sun exposure,\n existence of basement, inhabitable loft )

        else Apartment

        AG -> UI : insert data for the apartment (door number, number of bedrooms, number of bathrooms,\n number of parking spaces, available equipments)

           else Land
           AG -> UI : Land (  )

           end

           UI --> AG : request the type of Business : RENT or SELL

           AG -> UI : select the type of business

           alt RENT

            UI --> AG : request the price

            AG -> UI : insert the price

            UI --> AG : request the number of months rent

            AG -> UI : insert the data

            else SELL

            UI --> AG : request the price

            AG -> UI : insert the price
            end

            UI --> AG : request the commission

            AG -> UI : insert the commission

           UI -> AG: requests owner´s name

           AG --> UI: insert owner´s name

        UI --> AG : validate data

        AG -> UI : submits data


               UI -> CTRL : createAnnouncement((date,typeOfBusiness,area, location(city,street,zipcode, doorNumber),\n distance from the city \n center, price, numberOfMonthsRent, commission, photographs, type of property, owner))

               CTRL -> CTRL : getEmployeeFromSession()
                           activate CTRL

                                CTRL -> _APP: getInstance()
                                            activate _APP
                                         _APP --> CTRL: appSession
                                             deactivate _APP

                                         CTRL -> APP: getCurrentSession()
                                             activate APP

                                         APP --> CTRL: currentSession
                                             deactivate APP

                                        CTRL -> SESSAO: agentName = getUserNameByEmail()
                                             activate SESSAO

                                         SESSAO --> CTRL : agentName
                                             deactivate SESSAO



                               CTRL --> CTRL : agentName




                alt RENT

                CTRL -> AnnouncementREP**: createAnnouncement(date,RENT,area, location(city,street,zipcode,doorNumber),\n distance from the city \n center, price, numberOfMonthsRent, commission, photographs, type of property, owner, agentName))

                activate AnnouncementREP

                else SELL

               CTRL -> AnnouncementREP: createAnnouncement(date,SELL,area, location(city,street,zipcode,doorNumber),\n distance from the city \n center, price,commission, photographs, type of property, owner, agentName))

                end



            AnnouncementREP -> Announcement**: create(Announcement)

            activate Announcement

        Announcement -> Property** : create



                   activate Property


                    alt House
                    Property -> House** : create

                    House  -> House : House(number of bedrooms, number of bathrooms, available equipments,\n number of parking spaces, sun exposure, existence of basement,\n, inhabitable loft)
                    House -> House : validateHouse(House)
                    House -> Property : House(House)

                    else Apartment

                    Property -> Apartment** : create
                    Apartment  -> Apartment : Apartment(number of bedrooms, number of bathrooms, available equipments,\n number of parking spaces)
                    Apartment -> Apartment : validateHouse(Apartment)
                    Apartment -> Property : Apartment(Apartment)

                    else Land

                    Property -> Land** : create
                  Land  -> Land : Land()
                  Land -> Land : validateLand(Land)
                  Land -> Property : Land(Land)

                  end


                   Property -> Property: validateProperty(Property)

                   Property -> : Property

                   Property --> Announcement
                   deactivate Property
            Announcement -> Announcement: validateAnnouncement(Announcement)

            Announcement -> AnnouncementREP: Announcement(Announcement)

            deactivate Announcement


               activate AnnouncementREP
                   AnnouncementREP -> AnnouncementREP: validateAnnouncement(Announcement))
                   activate AnnouncementREP
                    AnnouncementREP -> AnnouncementREP: addAnnouncement (Announcement)

                     AnnouncementREP --> AnnouncementREP
                    deactivate AnnouncementREP

                    AnnouncementREP --> AnnouncementREP
                deactivate AnnouncementREP

                AnnouncementREP --> CTRL : Announcement

                deactivate AnnouncementREP

                            CTRL --> UI: Announcement

                            CTRL -> CTRL : getAgentPhoneNumber(agentName)
                             activate CTRL

                           CTRL -> REP : getInstance()
                           activate REP

                            REP --> CTRL: repositories
                              deactivate REP

                             CTRL -> REP : getEmployeeRepository()
                             activate REP
                           REP-> CTRL : EmployeeRepository
                           deactivate REP
                           CTRL -> EMP : getAgentPhoneNumber(agentName)
                            activate EMP

                             EMP --> CTRL : agentPhoneNumber
                             deactivate EMP

                           CTRL --> CTRL : agentPhoneNumber

                           UI -> CTRL : createSMSNotification(ownerName, ownerNumber, PropertyID, date, agentName, agentPhoneNumber)

                           CTRL -> NS : createSMSNotification(ownerName, ownerNumber, PropertyID, date, agentName, agentPhoneNumber)
                           activate NS
                           NS-> NS : createSMSNotification(ownerName, ownerNumber, PropertyID, date, agentName, agentPhoneNumber)
                           deactivate NS

                           NS --> CTRL: Notification
                           activate NS

                           CTRL -> NS: SendSMS(Notification)

                           deactivate NS

                           NS-> NS : sendSMS(Notification)


                            deactivate CTRL
                            UI --> AG: displays operation success
                    deactivate UI

                deactivate AG


          @enduml