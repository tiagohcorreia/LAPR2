@startuml
autonumber
title User specifies a new location

actor User
participant createLocationUI
participant CreateLocationController
participant Repository

activate User
User -> createLocationUI: Starts the program and selects 'New Location'
activate createLocationUI
createLocationUI --> User: Requests the state from the user
deactivate createLocationUI
User -> createLocationUI : inputs state
activate createLocationUI
activate CreateLocationController
createLocationUI -> CreateLocationController: createState(state)
deactivate createLocationUI
activate Repository
CreateLocationController ->Repository : validateState(state)
deactivate CreateLocationController
Repository -> CreateLocationController : returns outcome of the operation
deactivate Repository

deactivate createLocationUI
alt Invalid input
    activate CreateLocationController
    CreateLocationController -> createLocationUI: displayErrorMessage("Invalid state input. Please try again.")
    deactivate CreateLocationController
    loop until valid input provided
        User -> createLocationUI: inputs state
        activate createLocationUI
        createLocationUI -> CreateLocationController: createState(state)
        deactivate createLocationUI
        activate CreateLocationController
        activate Repository
        CreateLocationController -> Repository : validate(state)
        Repository -> CreateLocationController : returns outcome of the operation
        deactivate Repository

    end
end

Repository --> CreateLocationController: save(state)
deactivate Repository

deactivate CreateLocationController

activate createLocationUI
createLocationUI --> User: Requests the city from the user
deactivate createLocationUI
User -> createLocationUI : inputs city
activate createLocationUI
activate CreateLocationController
createLocationUI -> CreateLocationController: createCity(city)
deactivate createLocationUI
activate Repository
CreateLocationController ->Repository : validateCity(city)
deactivate CreateLocationController
Repository -> CreateLocationController : returns outcome of the operation
deactivate Repository

deactivate createLocationUI
alt Invalid input
    activate CreateLocationController
    CreateLocationController -> createLocationUI: displayErrorMessage("Invalid city input. Please try again.")
    deactivate CreateLocationController
    loop until valid input provided
        User -> createLocationUI: inputs city
        activate createLocationUI
        createLocationUI -> CreateLocationController: createCity(city)
        deactivate createLocationUI
        activate CreateLocationController
        activate Repository
        CreateLocationController -> Repository : validate(city)
        Repository -> CreateLocationController : returns outcome of the operation
        deactivate Repository

    end
end

Repository --> CreateLocationController: save(city)
deactivate Repository

deactivate CreateLocationController

activate createLocationUI
createLocationUI --> User: Requests the district from the user
deactivate createLocationUI
User -> createLocationUI : inputs district
activate createLocationUI
activate CreateLocationController
createLocationUI -> CreateLocationController: createDistrict(district)
deactivate createLocationUI
activate Repository
CreateLocationController ->Repository : validateDistrict(district)
deactivate CreateLocationController
Repository -> CreateLocationController : returns outcome of the operation
deactivate Repository

deactivate createLocationUI
alt Invalid input
    activate CreateLocationController
    CreateLocationController -> createLocationUI: displayErrorMessage("Invalid district input. Please try again.")
    deactivate CreateLocationController
    loop until valid input provided
        User -> createLocationUI: inputs district
        activate createLocationUI
        createLocationUI -> CreateLocationController: createDistrict(district)
        deactivate createLocationUI
        activate CreateLocationController
        activate Repository
        CreateLocationController -> Repository : validate(district)
        Repository -> CreateLocationController : returns outcome of the operation
        deactivate Repository

    end
end

Repository --> CreateLocationController: save(district)
deactivate Repository

deactivate CreateLocationController

activate createLocationUI
createLocationUI --> User: Requests the street from the user
deactivate createLocationUI
User -> createLocationUI : inputs street
activate createLocationUI
activate CreateLocationController
createLocationUI -> CreateLocationController: createStreet(street)
deactivate createLocationUI
activate Repository
CreateLocationController ->Repository : validateStreet(street)
deactivate CreateLocationController
Repository -> CreateLocationController : returns outcome of the operation
deactivate Repository

deactivate createLocationUI
alt Invalid input
    activate CreateLocationController
    CreateLocationController -> createLocationUI: displayErrorMessage("Invalid street input. Please try again.")
    deactivate CreateLocationController
    loop until valid input provided
        User -> createLocationUI: inputs street
        activate createLocationUI
        createLocationUI -> CreateLocationController: createStreet(street)
        deactivate createLocationUI
        activate CreateLocationController
        activate Repository
        CreateLocationController -> Repository : validate(street)
        Repository -> CreateLocationController : returns outcome of the operation
        deactivate Repository

    end
end

Repository --> CreateLocationController: save(street)
deactivate Repository

deactivate CreateLocationController

activate createLocationUI
createLocationUI --> User: Requests the zipcode from the user
deactivate createLocationUI
User -> createLocationUI : inputs zipcode
activate createLocationUI
activate CreateLocationController
createLocationUI -> CreateLocationController: createZipcode(zipcode)
deactivate createLocationUI
activate Repository
CreateLocationController ->Repository : validateZipcode(zipcode))
deactivate CreateLocationController
Repository -> CreateLocationController : returns outcome of the operation
deactivate Repository

deactivate createLocationUI
alt Invalid input
    activate CreateLocationController
    CreateLocationController -> createLocationUI: displayErrorMessage("Invalid zipcode input. Please try again.")
    deactivate CreateLocationController
    loop until valid input provided
        User -> createLocationUI: inputs zipcode
        activate createLocationUI
        createLocationUI -> CreateLocationController: createZipcode(zipcode)
        deactivate createLocationUI
        activate CreateLocationController
        activate Repository
        CreateLocationController -> Repository : validate(zipcode)
        Repository -> CreateLocationController : returns outcome of the operation
        deactivate Repository

    end
end

Repository --> CreateLocationController: save(zipcode)
deactivate Repository

deactivate CreateLocationController


activate createLocationUI
createLocationUI -> CreateLocationController : createLocation(street,city,district,state,zipcode)
activate CreateLocationController
deactivate createLocationUI
CreateLocationController -> Location : createLocation(street,city,district,state,zipcode)
deactivate CreateLocationController
activate createLocationUI
User -> createLocationUI : confirms
activate CreateLocationController
CreateLocationUI --> CreateLocationController: saveLocation(street,city,district,state,zipcode)

deactivate createLocationUI
activate Repository
CreateLocationController --> Repository: saveLocation(Location)
deactivate CreateLocationController
deactivate Repository
activate createLocationUI
createLocationUI -> User: Shows the created Location to the user
deactivate createLocationUI
User -> createLocationUI: Exits the program
deactivate User
@enduml