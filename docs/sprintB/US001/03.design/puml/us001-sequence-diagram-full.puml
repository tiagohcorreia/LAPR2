@startuml
skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

autonumber

'hide footbox
actor "Unregistered User" as UR
participant ":DisplayAnnouncementsUI" as UI
participant ":DisplayAnnouncementsUI" as UI
participant ":DisplayAnnouncementsController" as CTRL
participant ":Repositories" as reposclass
participant "repositories\n:Repositories" as repositories
participant "announcementRepository\n:AnnouncementRepository" as ARepo
participant "announcement\n:Announcement" as announcement
participant ":Property" as prop



activate UR
UR -> UI: starts announcement announcements
activate UI
UI -> CTRL**: create
UI -> CTRL: getAvailableFields()
activate CTRL

CTRL -> reposclass: getInstance()
activate reposclass
reposclass --> CTRL: repositories
deactivate reposclass
CTRL -> repositories: getAnnouncementsRepository()
activate repositories
repositories --> CTRL: announcementsRepository
deactivate repositories
CTRL -> ARepo: getAvailableFields()
activate ARepo
loop for each announcement
    ARepo -> announcement: isVisible()
    activate announcement
    return true/false
    'ARepo -> announcement: getBusinessType()
    ARepo -> announcement: getAnnouncement()
    alt true
        activate announcement
        announcement --> ARepo: announcement
        else false
        return null
        deactivate announcement
    end
end
ARepo --> CTRL: availableFields
deactivate ARepo

CTRL -> UI: availableFields
deactivate CTRL

UI --> UR: shows available fields and\nrequests data selection
alt
UR -> UI: selects required data
UI -> CTRL: getAnnouncements(businessType,\npropertyType, numberOfRooms)
activate CTRL
CTRL -> ARepo: getAnnouncements(businessType,\npropertyType, numberOfRooms)
activate ARepo
loop for each announcement
ARepo -> announcement: isVisible()
activate announcement
return true/false
deactivate announcement
ARepo -> announcement: isBusinessType(businessType)
activate announcement
return true/false
deactivate announcement

ARepo -> announcement: isPropertyType(propertyType)
activate announcement
announcement -> prop: getClassName().getSimpleName()
activate prop
return
return true/false
deactivate prop
deactivate announcement

ARepo -> announcement: numberOfRoomsEquals(\nnumberOfRooms)
activate announcement
activate announcement
announcement -> prop: getNumberOfRooms()
activate prop
return

return true/false
deactivate announcement


end

ARepo --> CTRL: announcements
deactivate ARepo
CTRL --> UI: announcements
deactivate CTRL
UI --> UR: shows matching announcements
else
UR -> UI: doesn't select any data
UI -> CTRL: getAllVisibleAnnouncements()
activate CTRL
CTRL -> ARepo: getAllVisibleAnnouncements()
activate ARepo
loop for each announcement
ARepo -> announcement: isVisible()
activate announcement
return true/false
deactivate announcement
end
ARepo --> CTRL: announcements
deactivate ARepo

CTRL --> UI: announcements
deactivate CTRL
UI --> UR: shows all announcements

end 'ALT fragment end

UR -> UI: selects sorting order
UI -> UI: sort(mode)
UI --> UR: displays sorted data


@enduml