@startuml
'https://plantuml.com/class-diagram

skinparam monochrome true
skinparam packageStyle rectangle
skinparam shadowing false

'skinparam linetype ortho
'left to right direction
skinparam classAttributeIconSize 0
skinparam groupInheritance 1
hide circle
hide methods

class Address{
doorNumber
street
zipCode
}

Address -> City: includes >

Network "1" -- "*" Branch: owns >
Branch "1" -- "*" Announcement: publishes >
Announcement "1" -- "1" Property: contains >

Network "1" -- "*" Employee: employs >


Property <|-- House
Property <|-- Apartment
Property <|-- Land


"System Administrator" --|> Employee
"Network Manager" --|> Employee
"Store Manager" --|> Employee
Agent --|> Employee

Employee "1" - "1" Branch: works at a >

"System Administrator" "1" ----> "*" Employee: registers >
"System Administrator" "1" ---> "*" Branch: registers >


"System Administrator" "1" --> "*" State: specifies >
"System Administrator" "1" -> "*" District: specifies >
"System Administrator" "1" -> "*" City: specifies >

together {
Buyer --|> Client
Seller --|> Client
}

Seller "1" - "*" Property: owns >
Seller "1" - "*" Announcement: creates >
Agent "1" - "*" Announcement: validates >
Visit "1" - "1" Buyer: requests <
Buyer "1" - "*" Announcement: browses >
Visit "1" --- "1" Agent: scheduled by >

together {
Property "1" - "1" City: located in >
District "1" - "*" City: located in <
State "1" - "*" District: located in <
}


class Network{
name
}

class Branch{
name
address
email
phoneNumber
}

class Employee{
name
cCNumber
taxNumber
address
email
phoneNumber
}

together {
class "System Administrator"

class "Network Manager"

class "Store Manager"

class Agent
}

class Client{
name
email
cCNumber
taxNumber
address
phoneNumber
}
class Buyer
class Seller

class Visit{
date
time
prediction
}

class Order{
price
}

class Commission{
value
}

class Announcement{
state
price
typeOfBusiness
}

Announcement ---> Commission: has a >

Commission <|- FixedCommision
Commission <|- PercentageCommision

Buyer -> Order: submits >
Order -> Property: to buy/rent >

class Property{
area
cityCenterDistance
photographs
}

Property -> Address: located in >

class House{
numberOfBedrooms
numberOfBathrooms
numberOfParkingSpaces
hasBasement

hasInhabitableLoft
sunExposure
}

class Apartment{
numberOfBedrooms
numberOfBathrooms
numberOfParkingSpaces
equipment
}

class Land{
}

class State{
name
}
class District{
name
}
class City{
name
}

'class User{
'email
'password
'}
'
'User <--- "System Administrator": accesses as <
'User <--- "Network Manager": accesses as <
'User <--- Agent: accesses as <
'User <--- "Store Manager": accesses as <
'User <--- Client: accesses as <

@enduml